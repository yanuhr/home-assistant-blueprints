blueprint:
  name: Spoľahlivé osvetlenie pomocou FP2 + PIR
  description: >
    Automatické ovládanie osvetlenia na základe detekcie prítomnosti pomocou Aqara FP2
    a PIR senzora. Vyžaduje súčasnú detekciu oboma senzormi pre zapnutie a
    nepretržitú absenciu detekcie pre vypnutie. Zohľadňuje stav rolety a zabezpečuje,
    že svetlo nezostane zapnuté, ak v miestnosti nikto nie je.

  domain: automation
  input:
    zone1_sensor:
      name: FP2 senzor prítomnosti (zóna 1)
      description: Vyberte Aqara FP2 senzor prítomnosti pre hlavnú zónu miestnosti
      selector:
        entity:
          domain: binary_sensor

    interference_zone_sensor:
      name: FP2 senzor prítomnosti (interferenčná zóna)
      description: Vyberte Aqara FP2 senzor prítomnosti pre interferenčnú zónu
      selector:
        entity:
          domain: binary_sensor

    pir_sensor:
      name: PIR senzor pohybu (voliteľné)
      description: Vyberte PIR senzor pohybu pre potvrdenie prítomnosti v interferenčnej zóne
      selector:
        entity:
          domain: binary_sensor

    target_light:
      name: Ovládané svetlo
      description: Vyberte svetlo, ktoré sa má ovládať
      selector:
        entity:
          domain: light

    window_cover:
      name: Roleta (voliteľné)
      description: Vyberte roletu, ktorá musí byť zatvorená pre zapnutie svetla
      selector:
        entity:
          domain: cover

    notification_services:
      name: Notifikačné služby (voliteľné)
      description: >
        Zadajte názvy notifikačných služieb pre debug výstup.
        Môžete zadať viacero služieb, každú na nový riadok.
      default: []
      selector:
        text:
          multiple: true

    vypinacie_oneskorenie:
      name: Oneskorenie vypnutia
      description: Čas v sekundách po ktorom sa svetlo zhasne
      default: 60
      selector:
        number:
          min: 10
          max: 3600
          step: 1
          unit_of_measurement: s

    interference_timeout:
      name: Timeout pre interferenčnú zónu
      description: Čas v sekundách po ktorom sa interferenčná zóna považuje za falošnú detekciu
      default: 300
      selector:
        number:
          min: 60
          max: 3600
          step: 1
          unit_of_measurement: s

    allow_time_start:
      name: Začiatok povoleného intervalu
      description: Čas začiatku povoleného intervalu (napr. 06:00:00)
      default: "06:00:00"
      selector:
        time: {}

    allow_time_end:
      name: Koniec povoleného intervalu
      description: Čas konca povoleného intervalu (napr. 23:30:00)
      default: "23:30:00"
      selector:
        time: {}

trigger:
  - platform: state
    entity_id: !input zone1_sensor
  - platform: state
    entity_id: !input interference_zone_sensor
  - platform: time_pattern
    seconds: /30

variables:
  zone1_sensor_id: !input zone1_sensor
  interference_zone_sensor_id: !input interference_zone_sensor
  pir_sensor_id: !input pir_sensor
  target_light_id: !input target_light
  window_cover_id: !input window_cover
  notification_services: !input notification_services
  vypinacie_oneskorenie: !input vypinacie_oneskorenie
  interference_timeout: !input interference_timeout
  allow_time_start: !input allow_time_start
  allow_time_end: !input allow_time_end
  current_time: "{{ now().strftime('%H:%M:%S') }}"
  is_allowed_time: "{{ current_time >= allow_time_start and current_time <= allow_time_end }}"
  zone1_detected: "{{ is_state(zone1_sensor_id, 'on') }}"
  interference_detected: "{{ is_state(interference_zone_sensor_id, 'on') }}"
  pir_detected: "{{ pir_sensor_id is not none and is_state(pir_sensor_id, 'on') }}"
  light_is_off: "{{ is_state(target_light_id, 'off') }}"
  light_is_on: "{{ is_state(target_light_id, 'on') }}"
  window_is_closed: "{{ (window_cover_id | default('')) == '' or is_state(window_cover_id, 'closed') }}"
  window_is_closing: "{{ (window_cover_id | default('')) != '' and is_state(window_cover_id, 'closing') }}"
  window_is_open: "{{ (window_cover_id | default('')) != '' and is_state(window_cover_id, 'open') }}"
  valid_presence: "{{ (zone1_detected and not interference_detected) or (interference_detected and pir_detected) }}"
  interference_timeout_reached: "{{ interference_detected and not zone1_detected and (as_timestamp(now()) - as_timestamp(states[interference_zone_sensor_id].last_changed)) > interference_timeout }}"

condition:
  - condition: template
    value_template: "{{ is_allowed_time }}"

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ window_is_closing and zone1_detected and light_is_off }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ target_light_id }}"
          - service: logbook.log
            data:
              name: "Spoľahlivé osvetlenie"
              message: "Svetlo zapnuté - Zóna 1: {{ zone1_detected }}, Roleta: zatvára sa"
          - repeat:
              for_each: "{{ notification_services }}"
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    title: "Spoľahlivé osvetlenie"
                    message: "Svetlo zapnuté - Zóna 1: {{ zone1_detected }}, Roleta: zatvára sa"

      - conditions:
          - condition: template
            value_template: "{{ valid_presence and light_is_off and window_is_closed }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ target_light_id }}"
          - service: logbook.log
            data:
              name: "Spoľahlivé osvetlenie"
              message: "Svetlo zapnuté - Validná prítomnosť: {{ valid_presence }}, Roleta: {{ window_is_closed }}"
          - repeat:
              for_each: "{{ notification_services }}"
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    title: "Spoľahlivé osvetlenie"
                    message: "Svetlo zapnuté - Validná prítomnosť: {{ valid_presence }}, Roleta: {{ window_is_closed }}"

      - conditions:
          - condition: template
            value_template: "{{ window_is_open and light_is_on }}"
        sequence:
          - delay:
              seconds: 2
          - service: light.turn_off
            target:
              entity_id: "{{ target_light_id }}"
          - service: logbook.log
            data:
              name: "Spoľahlivé osvetlenie"
              message: "Svetlo zhasnuté - Roleta: otvorená"
          - repeat:
              for_each: "{{ notification_services }}"
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    title: "Spoľahlivé osvetlenie"
                    message: "Svetlo zhasnuté - Roleta: otvorená"

      - conditions:
          - condition: template
            value_template: "{{ (not valid_presence or interference_timeout_reached) and light_is_on }}"
        sequence:
          - wait_template: "{{ valid_presence and not interference_timeout_reached }}"
            timeout: "{{ vypinacie_oneskorenie }}"
            continue_on_timeout: true
          - if:
              - condition: template
                value_template: "{{ not valid_presence or interference_timeout_reached }}"
            then:
              - service: light.turn_off
                target:
                  entity_id: "{{ target_light_id }}"
              - service: logbook.log
                data:
                  name: "Spoľahlivé osvetlenie"
                  message: "Svetlo zhasnuté - {{ 'timeout interferenčnej zóny' if interference_timeout_reached else 'žiadna validná prítomnosť' }}"
              - repeat:
                  for_each: "{{ notification_services }}"
                  sequence:
                    - service: "{{ repeat.item }}"
                      data:
                        title: "Spoľahlivé osvetlenie"
                        message: "Svetlo zhasnuté - {{ 'timeout interferenčnej zóny' if interference_timeout_reached else 'žiadna validná prítomnosť' }}"

    default:
      - service: logbook.log
        data:
          name: "Spoľahlivé osvetlenie"
          message: "Žiadna podmienka nebola splnená – žiadna akcia nebola vykonaná."
      - repeat:
          for_each: "{{ notification_services }}"
          sequence:
            - service: "{{ repeat.item }}"
              data:
                title: "Spoľahlivé osvetlenie"
                message: "Automatizácia sa spustila, ale žiadna podmienka nebola splnená."

mode: restart
