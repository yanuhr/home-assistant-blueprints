blueprint:
  name: Upozornenie na zadymenie
  description: >
    Automatiz√°cia, ktor√° odosiela notifik√°cie pri detekcii dymu a jeho z√°niku.
    Voliteƒæne m√¥≈æe spusti≈• alarmov√∫ akciu (napr. sir√©na, sc√©na) pri zadymen√≠.
    Vhodn√© pre viacero Aqara detektorov dymu (napr. JY-GZ-01AQ).

  domain: automation
  input:
    smoke_sensors:
      name: Detektory dymu
      description: Vyberte senzory dymu, ktor√© chcete monitorova≈•
      selector:
        entity:
          domain: binary_sensor
          device_class: smoke
          multiple: true

    notification_services:
      name: Notifikaƒçn√© slu≈æby
      description: >
        Zadajte n√°zvy notifikaƒçn√Ωch slu≈æieb (napr. notify.mobile_app_jan).
        M√¥≈æete zada≈• viacero slu≈æieb, ka≈æd√∫ na nov√Ω riadok.
      default: []
      selector:
        text:
          multiple: true

    alarm_mode:
      name: Aktivova≈• alarm
      description: >
        Ak je aktivovan√©, spust√≠ sa definovan√° alarmov√° akcia pri zadymen√≠.
      default: false
      selector:
        boolean: {}

    custom_alert_actions:
      name: Alarmov√° akcia (voliteƒæn√°)
      description: >
        Voliteƒæn√° akcia, ktor√° sa spust√≠ pri zadymen√≠ ‚Äì napr√≠klad skript alebo sc√©na.
      default: []
      selector:
        entity:
          domain: [script, scene]
          multiple: true

    repeat_notifications:
      name: Opakovan√© notifik√°cie
      description: >
        Ak je aktivovan√©, notifik√°cie sa bud√∫ opakova≈• ka≈æd√Ωch 5 min√∫t, pokiaƒæ
        zost√°va detekovan√Ω dym.
      default: false
      selector:
        boolean: {}

    tts_players:
      name: TTS prehr√°vaƒçe (voliteƒæn√©)
      description: >
        Vyberte zariadenia s podporou TTS pre prehr√°vanie hlasov√Ωch hl√°sen√≠.
        Podporovan√© s√∫ napr√≠klad:
        - Home Assistant Voice (media_player.assist_*)
        - Google Nest/Home (media_player.google_*)
        - Amazon Echo (media_player.echo_*)
        M√¥≈æete vybra≈• viacero zariaden√≠, na ktor√Ωch sa m√° hl√°senie prehra≈•.
      default: []
      selector:
        entity:
          domain: media_player
          multiple: true

    use_room_names:
      name: Pou≈æi≈• n√°zvy miestnost√≠
      description: >
        Ak je aktivovan√©, v hl√°seniach sa pou≈æij√∫ n√°zvy miestnost√≠ namiesto n√°zvov senzorov.
        N√°zvy miestnost√≠ sa z√≠skaj√∫ z oblasti (area) priradenej k senzoru.
      default: false
      selector:
        boolean: {}

trigger:
  - platform: state
    entity_id: !input smoke_sensors
    from: "off"
    to: "on"

  - platform: state
    entity_id: !input smoke_sensors
    from: "on"
    to: "off"

  - platform: state
    entity_id: !input smoke_sensors
    to: ["unavailable", "unknown"]

  - platform: time_pattern
    minutes: /5
    id: repeat_notification

condition:
  - condition: template
    value_template: >-
      {% if trigger.id == 'repeat_notification' %}
        {{ repeat_notifications and smoke_sensors | select('is_state', 'on') | list | length > 0 }}
      {% else %}
        true
      {% endif %}

action:
  - variables:
      sensor_name: >-
        {% if trigger is defined and trigger.entity_id is defined %}
          {{ state_attr(trigger.entity_id, 'friendly_name') | default(trigger.entity_id) }}
        {% else %}
          Nezn√°my senzor
        {% endif %}
      room_name: >-
        {% if trigger is defined and trigger.entity_id is defined and use_room_names %}
          {% set area = area_name(trigger.entity_id) %}
          {{ area if area else sensor_name }}
        {% else %}
          {{ sensor_name }}
        {% endif %}
      new_state: "{{ trigger.to_state.state }}"
      notification_services: !input notification_services
      alarm_mode: !input alarm_mode
      custom_alert_actions: !input custom_alert_actions
      repeat_notifications: !input repeat_notifications
      tts_players: !input tts_players
      use_room_names: !input use_room_names
      has_notifications: "{{ notification_services | length > 0 }}"
      has_alarm_action: "{{ custom_alert_actions | length > 0 }}"
      has_tts: "{{ tts_players | length > 0 }}"

  - choose:
      - alias: Zadymenie
        conditions:
          - condition: template
            value_template: "{{ new_state == 'on' }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ has_notifications }}"
            then:
              - repeat:
                  for_each: "{{ notification_services }}"
                  sequence:
                    - service: "{{ repeat.item }}"
                      data:
                        title: "üö® Detekovan√Ω dym"
                        message: "Detektor {{ room_name }} zaznamenal dym!"
                        data:
                          priority: high
                          importance: max
                          channel: emergency
          - if:
              - condition: template
                value_template: "{{ alarm_mode and has_alarm_action }}"
            then:
              - repeat:
                  for_each: "{{ custom_alert_actions }}"
                  sequence:
                    - service: homeassistant.turn_on
                      target:
                        entity_id: "{{ repeat.item }}"
          - if:
              - condition: template
                value_template: "{{ has_tts }}"
            then:
              - repeat:
                  for_each: "{{ tts_players }}"
                  sequence:
                    - service: tts.google_translate_say
                      target:
                        entity_id: "{{ repeat.item }}"
                      data:
                        message: "Pozor, bol detegovan√Ω dym v {{ room_name }}"
                        language: sk

      - alias: Koniec zadymenia
        conditions:
          - condition: template
            value_template: "{{ new_state == 'off' }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ has_notifications }}"
            then:
              - repeat:
                  for_each: "{{ notification_services }}"
                  sequence:
                    - service: "{{ repeat.item }}"
                      data:
                        title: "‚ÑπÔ∏è Dym zmizol"
                        message: "Detektor {{ room_name }} u≈æ nezaznamen√°va dym."
                        data:
                          priority: default
                          importance: high

      - alias: Senzor nie je dostupn√Ω
        conditions:
          - condition: template
            value_template: "{{ new_state in ['unavailable', 'unknown'] }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ has_notifications }}"
            then:
              - repeat:
                  for_each: "{{ notification_services }}"
                  sequence:
                    - service: "{{ repeat.item }}"
                      data:
                        title: "‚ö†Ô∏è Senzor nie je dostupn√Ω"
                        message: "Detektor {{ room_name }} nie je dostupn√Ω a m√¥≈æe by≈• nefunkƒçn√Ω!"
                        data:
                          priority: high
                          importance: high
                          channel: warning

mode: single
