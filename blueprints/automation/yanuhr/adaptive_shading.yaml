blueprint:
  name: Adaptívne tienenie - viac miestností (zdieľaný svetelný senzor)
  description: >
    Automatické ovládanie roliet pre viacero miestností na základe jedného senzora osvetlenia.
    Zohľadňuje otvorené okná, úroveň osvetlenia, čas a západ slnka. Odosiela notifikácie pri otvorenom okne.

  domain: automation
  input:
    lux_sensor:
      name: Senzor osvetlenia (spoločný)
      description: Vyberte senzor osvetlenia, ktorý bude monitorovať úroveň svetla
      selector:
        entity:
          domain: sensor
          device_class: illuminance

    morning_trigger_time:
      name: Ranný čas spustenia
      description: Čas, kedy sa začne automatické ovládanie ráno
      default: "07:30:00"
      selector:
        time: {}

    notification_services:
      name: Notifikačné služby
      description: Vyberte služby, ktoré budú používané pre notifikácie
      default: []
      selector:
        target:
          entity:
            domain: notify

    room_config:
      name: Konfigurácia miestností
      description: >
        Pre každú miestnosť vyberte roletu a voliteľne aj senzor okna.
        Ak nie je senzor okna vybraný, roleta sa bude ovládať bez ohľadu na stav okna.
      selector:
        object: {}

trigger:
  - platform: time
    at: !input morning_trigger_time

  - platform: numeric_state
    entity_id: !input lux_sensor
    below: 600
    for:
      minutes: 5

  - platform: numeric_state
    entity_id: !input lux_sensor
    above: 800
    for:
      minutes: 2

  - platform: sun
    event: sunset
    offset: "-00:30:00"

condition:
  - condition: time
    after: !input morning_trigger_time
  - condition: sun
    before: sunset

action:
  - variables:
      lux_sensor_id: !input lux_sensor
      lux: "{{ states(lux_sensor_id) | float(0) }}"
      rooms: !input room_config
      open_windows: []
      after_sunset: "{{ state_attr('sun.sun', 'elevation') | float(1) < 0 }}"
      notification_services: !input notification_services
      is_morning: "{{ now().strftime('%H:%M:%S') >= morning_trigger_time }}"
      is_bright: "{{ lux > 800 }}"
      is_dark: "{{ lux < 600 }}"
      is_daytime: "{{ is_morning and not after_sunset }}"

  - repeat:
      for_each: "{{ rooms }}"
      sequence:
        - variables:
            name: "{{ repeat.item.name }}"
            window_sensor: "{{ repeat.item.window_sensor | default('') }}"
            cover: "{{ repeat.item.cover }}"
            window_open: "{{ window_sensor != '' and is_state(window_sensor, 'on') }}"
            window_closed: "{{ window_sensor != '' and is_state(window_sensor, 'off') }}"
            should_close: "{{ (window_sensor | default('')) == '' or window_closed }}"

        - choose:
            - alias: "Rozjasnenie - otvorenie"
              conditions:
                - condition: template
                  value_template: "{{ is_daytime and is_bright }}"
              sequence:
                - service: cover.open_cover
                  target:
                    entity_id: "{{ cover }}"

            - alias: "Stmievanie alebo západ slnka - okamžité zatvorenie"
              conditions:
                - condition: template
                  value_template: "{{ (is_dark and is_daytime) or after_sunset }}"
                - condition: template
                  value_template: "{{ should_close }}"
              sequence:
                - delay:
                    seconds: 2
                - service: cover.close_cover
                  target:
                    entity_id: "{{ cover }}"

            - alias: "Stmievanie alebo západ slnka - čakanie na zatvorenie okna"
              conditions:
                - condition: template
                  value_template: "{{ (is_dark and is_daytime) or after_sunset }}"
                - condition: template
                  value_template: "{{ window_sensor != '' and window_open }}"
              sequence:
                - variables:
                    open_windows: "{{ open_windows + [name] }}"
                - repeat:
                    for_each: "{{ notification_services }}"
                    sequence:
                      - service: "{{ repeat.item }}"
                        data:
                          title: "Upozornenie: otvorené okno"
                          message: >-
                            Rolety v miestnosti {{ name }} sa nezatiahnu, pretože je otvorené okno.
                            Po jeho zatvorení sa roleta automaticky zatiahne o 30 sekúnd.
                - wait_template: "{{ is_state(window_sensor, 'off') }}"
                - delay:
                    seconds: 30
                - service: cover.close_cover
                  target:
                    entity_id: "{{ cover }}"

  - if:
      - condition: template
        value_template: "{{ open_windows | length > 0 and notification_services | length > 0 }}"
    then:
      - repeat:
          for_each: "{{ notification_services }}"
          sequence:
            - service: "{{ repeat.item }}"
              data:
                title: "Upozornenie: otvorené okná"
                message: >-
                  Vonku sa stmieva a nasledujúce miestnosti majú otvorené okná,
                  preto sa rolety nezatiahli: {{ open_windows | join(', ') }}

mode: single
